server:
  port: 8080
  servlet:
    context-path: /
    encoding:
      charset: UTF-8
      enabled: true
      force: true

spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/security?serverTimezone=Asia/Seoul
    username: cos
    password: cos1234


  jpa:
    hibernate:
      ddl-auto: update #create update none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: true

  security:
    oauth2:
      client:
        registration:
          #goboseok7
          google:
            client-id: 453315038388-u5ufp47r41c9m97mcljeakem07h61ntv.apps.googleusercontent.com
            client-secret: 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
            scope:
              - email
              - profile
          #qhrje12
          facebook:
            client-id: 5646088698775868
            client-secret: 5a51ac9a45db28e15a262be641d18d49
            scope:
              - email
              - public_profile

          naver:
            client-id: x9xjrOkaOySGXGVWMKaJ
            client-secret: cn9gsbd_gK
            scope:
              - name
              - email
              #- profile_image
            client-name: Naver
            #Authorization Code Grant Type 방식
            authorization-grant-type: authorization_code
            # google, facebook 은 기본으로 설정되어있지만 naver 로그인은 적어주어야한다.
            # why ? 주소가 고정되어있지않고 사용자가 임의로 바꿀수 있기 때문에 명시해주아야함
            # api 발급 시 CallbackUrl과 같아야한다.
            redirect-uri: http://localhost:8080/login/oauth2/code/naver
            # provider 값을 설정 해주어야한다.



        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response # 회원정보를 json으로 받는데 response라는 키값으로 네이버가 리턴해준다.


